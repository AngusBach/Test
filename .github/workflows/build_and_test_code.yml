name: build and test code

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install gtest manually
      run: sudo apt-get install libgtest-dev

## Do all the TDD stuff
    - name: Configure CMake "tdd"
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/code/tdd/build -S${{github.workspace}}/code/tdd -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "tdd"
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/code/tdd/build --config ${{env.BUILD_TYPE}}

    - name: Test "tdd"
      working-directory: ${{github.workspace}}/code/tdd/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

## Do all the debugging stuff
    - name: Configure CMake "debugging"
      run: cmake -B ${{github.workspace}}/code/debugging/build -S${{github.workspace}}/code/debugging/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "debugging"
      run: cmake --build ${{github.workspace}}/code/debugging/build --config ${{env.BUILD_TYPE}}

    - name: Test "debugging"
      working-directory: ${{github.workspace}}/code/debugging/build
      run: ctest -C ${{env.BUILD_TYPE}}

## Do all the cmake stuff
    - name: Configure CMake "cmake"
      run: cmake -B ${{github.workspace}}/code/cmake/build -S${{github.workspace}}/code/cmake/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "cmake"
      run: cmake --build ${{github.workspace}}/code/cmake/build --config ${{env.BUILD_TYPE}}

## Do all the functions stuff
    - name: Configure CMake "functions"
      run: cmake -B ${{github.workspace}}/code/functions/build -S${{github.workspace}}/code/functions/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "functions"
      run: cmake --build ${{github.workspace}}/code/functions/build --config ${{env.BUILD_TYPE}}

## Do all the libraries stuff
    - name: Configure CMake "libraries"
      run: cmake -B ${{github.workspace}}/code/libraries/build -S${{github.workspace}}/code/libraries/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "libraries"
      run: cmake --build ${{github.workspace}}/code/libraries/build --config ${{env.BUILD_TYPE}}

## Do all the user_input stuff
    - name: Configure CMake "user_input"
      run: cmake -B ${{github.workspace}}/code/user_input/build -S${{github.workspace}}/code/user_input/ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build "user_input"
      run: cmake --build ${{github.workspace}}/code/user_input/build --config ${{env.BUILD_TYPE}}

## Build all in basics
    - name: build "basics"
      working-directory: ${{github.workspace}}/code/basics/
      run: |
           gcc basics.c \
           && ./a.out

## Build all in basics_in_C
    - name: build "basics_in_C"
      working-directory: ${{github.workspace}}/code/basics_in_C/
      run: |
           gcc basics_in_c.c \
           && ./a.out \
           && gcc basics_in_c_arrays.c \
           && ./a.out \
           && gcc basics_in_c_branching_looping.c \
           && ./a.out \
           && gcc basics_in_c_macro.c \
           && ./a.out \
           && gcc basics_in_c_pointers.c \
           && ./a.out \
           && gcc basics_in_c_structures.c \
           && ./a.out \
           && gcc basics_in_c_variables.c \
           && ./a.out

## Build homework 1-2
    - name: build "homework 1-2"
      working-directory: ${{github.workspace}}/code/homework_1-2/
      run: |
           gcc grades.c \
           && ./a.out \
           && gcc leap_year.c \
           && ./a.out \
           && gcc percent.c \
           && ./a.out 
        
## Build homework 1-3
    - name: build "homework 1-3"
      working-directory: ${{github.workspace}}/code/homework_1-3/
      run: |
           gcc pointer_swap.c \
           && ./a.out \
           && gcc student.c 

## Build homework 1-4
    - name: build "homework 1-4"
      working-directory: ${{github.workspace}}/code/homework_1-4/
      run: |
           gcc grades.c \
           && ./a.out \
           && gcc student.c \
           && ./a.out 
